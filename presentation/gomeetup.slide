Gocrud
Go Meetup Brisbane
28 Sep 2015
Tags: go golang

Manish R Jain
Backend Developer
Ex-Googler - Web Search & Knowledge
manishrjain@gmail.com
https://mrjn.xyz
@manishrjain

* What is Gocrud?

Go framework to help build horizontally scalable and database-wise pluggable
CRUD-heavy backends from the get go.

- *Horizontal*Scalability*: Both access patterns and data is structured in a scalable way.
Lookup centric access pattern, which supports database sharding.
Limit scanning required (to edit logs), to keep it limited to a few shards.
Avoid joins at database level, which complicate sharding.

- *Pluggable*Datastores*: Ability to switch from one data store to another, without much effort.
For e.g. Start with MySQL, and then switch to Cassandra / RethinkDB later, without changing application code.

* Datastore Support
Gocrud currently supports these data storage and search technologies:

- LevelDB (awesome for unit testing)
- PostgreSQL
- MySQL & other SQL stores
- Cassandra
- MongoDB
- Google Datastore
- RethinkDB
- Elastic Search (search engine)
- Embarrasingly simple custom written Memory based search (for unit testing)

* Why?

Because most startup founders have these concerns:

- Worry about MVP, not design and maintenance.
- Pick technology stack based on hype or convenience, not research.
- Little thought spent on horizontal scaling of database.
- Little thought spent on search engines to provide read-only access, or complex queries.
- Eager to sustain *technical*cancer* (/debt).

All these early decisions cause issues later on, as traffic starts growing.
It's hard to rewrite code or add abstraction layers later between code and database.

* How does Gocrud help?

- Graph based approach -- stores all Edges in one table.
- Keeps table schema stupid simple!
- Infinitely *flexible*data*schema*, thanks to Graph like operations.
- Data storage and representation is inherently horizontally scalable.
- Allows you to choose from a variety of data stores.
- Act as an abstraction layer above data store to keep application logic clear and separate.
- As things scale if data store becomes an issue, swap it out with another, with no code changes.
- Introduce search engines (like ElasticSearch) early on, to provide advanced search functionality, and avoid _abusing_ data stores.
- Awesome for unit testing!
Use LevelDB / MemSearch for writing unit tests, switch to Cassandra / Elastic Search in production.

* Design Principles

- *Versioning*: Keep track of all edits to the data. No overwrites / replaces.
- *Retention*: Retain all the edits, including deletion. Never _actually_ delete data, only mark it as deleted.
- *Authorship*: Keep a log of all changes made by every user.

* Use Case: Build a social platform
In a SQL / NoSQL table, this is how the data might be represented.

.image Plain.png

* Implement versioning to allow edits and reverts
Added a version field to all tables.

.image Version.png

* Implement retention to allow accountability
Added a deleted bit to all tables, to avoid deleting data.

.image Version_Delete.png

* Implement Authorship
Keep a separate log table to store all the edits to the data.

.image logtable.jpg

* Representation in Gocrud
As you can see, the SQL / NoSQL table approach gets pretty complicated, pretty fast.

Instead, Gocrud uses *graph*approach*.

- Tables are considered entities, and all their properties and connections are edges.
- Edges are inserted in _append_only_ mode in data stores.

.image social_graph.bmp

* How are design principles implemented
	Edge = (Entity, Property, Value/EntityId, Source, Timestamp)

- *Versioning*: All writes add new *Edges*, instead of replacing previous ones. When reading, choose the latest version.
	(Entity, Property, Val1, ts1) > (Entity, Property, Val0, ts0)

- *Retention*: When deleting an *Entity*, add an edge with property delete. When reading, if delete edge is found, ignore the entity.
	(Entity, "_deleted_", true)

- *Authorship*: Every *Edge* stores it's source, so we can easily find all edits by an author. So, data store also acts as a log table.



* Code: Updating data
.code example.go /^func storeUpdate/,/^}/

* Code: Querying data from store
.code example.go /^func storeQuery/,/^}/

* Output
.code queryoutput.txt

* Code: Indexer for search engine
As Entities get modified in store, their corresponding search docs get re-generated and updated in search engine using *Indexers*.

.code example.go /SimpleIndexer/,/end_simple/

* Code: Query search engine
.code example.go /^func searchQuery/,/^}/
.code output.txt

* So what's the exit Strategy?

- I hate frameworks! Every framework should have a way to be abandoned.
- Create *store* and *search* modules, overwrite those functions with your custom implementation.

.code interface.go
# Show the functions here.

* Try it out!
This meme generated by a co-founder of a startup using Gocrud best describes it.

.image allthings.jpg
